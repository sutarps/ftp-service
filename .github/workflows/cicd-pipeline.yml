# This workflow will build a package using Maven, build a Docker image, and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Package

on:
  push:
    branches: ["main"]

jobs:
  ci_build:
    name: CI Build
    runs-on: self-hosted
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn -B package --file pom.xml

  build_and_push_docker:
    name: Build and Push Docker Image
    runs-on: self-hosted
    permissions:
      packages: write
      contents: read

    needs: ci_build
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Build Docker image
        run: docker build -t ghcr.io/${{github.repository_owner}}/ftp-service:latest .

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push Docker image to GHCR
        run: docker push ghcr.io/${{github.repository_owner}}/$IMAGE_NAME:latest

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IMAGE_NAME: ftp-service
  deploy:
    name: Deploy to dev
    runs-on: self-hosted
    needs: build_and_push_docker
    steps:
      - name: Create kubeconfig
        run: cat ${HOME}/.kube/config
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Use context
        run: kubectl config use-context kubernetes-admin@kubernetes
      - name: Kubernetes dryrun
        run: kubectl apply -k kubernetes/overlays/dev/ -n dev --dry-run=ftp-service
      - name: Deploy to cluster
        run: kubectl apply -k kubernetes/overlays/dev/ -n dev